
Goal: refactor generated code for usart initialization.

1. 	Do some analysis. DONE.
2. 	Planing to test HAL_UART_MspInit().
3. 	The first case says uart clock should be enabled after the function is called.
	call HAL_UART_MspInit(huart), compilation error.
	declare and initialize a test struct. (copy code from MX_USART2_UART_Init), compilation pass.
	add test case to test group runner and call group runner in main.c
4.	Add tool function uart_clock_enabled(), add assertion, test failed.
5.	recover uart enable in mspinit, failed. 
	mx_usart2_init commented out in main.c
	usart_clock_enabled bugs fixed. 
	Test passed.
6.	Now i want to add gpio init, but wait, what about the setup and teardown? for the sake of independent and repeatable.
	If we do UartClockShouldBeEnabled multiple times, though all tests should pass, they are not in the right context we expect.
	We want set up the 'clear' stage, what we mean by clear? no clock, no gpio, no dma, no irq, no uart. Good. but should we go
	that far now? I think not. we can simply disable the clock. Maybe sometime we will move the code to setup, or encapsulate, whatever,
	refactor maybe, but now a simple __USART2_CLK_DISABLE as the BUILD is enough. build and test pass.
7.	A little refactor. add a function in test file, uart_clock_disable(). do replacement, build and test pass.
8.	A little more refactor. use pointer other than struct/object.
9.	Before enabling GPIO init in production code. add a test case, assert in a tricky way. rename the test case. 
	GpioShouldBeConfigured renamed to GpioShouldBeNonInput, partial test because we trust the code.
	Test and fail.
10.	Add test case for rx dma, the globals are duplicated, as well as extern-ed. dirty. test and fail.
11. enabled rx dma and passed.
12. add test case for rx dma/uart link check, failed.
13.	enabled rx dma/uart link in production code, test failed. bug found in test assertion. cleared.
14. add test case for tx dma, test failed, then enable tx dma init in production code, test passed.
15.	add test case for tx dma/uart link, enabling production code, test passed.
16. in this step, we add a task to pending list, move SetPriorityGroup elsewhere.
17. in this step, we add a task to pending list, we think the priority should be parameterized.
18. add test case for irq enable. passed.
19. Do a summary
	a) gpio_init struct should be parameterized.
	b) dma init should be parameterized.
	c) SetPriorityGroup not neccessary.
	d) irq parameter should not be hard coded.
	and lets go, do container_of trick.
20. add uartex_handletypedef struct and initialized object (for test.)
21. gpio_init inside mspinit refactored, test passed.
22. use static instance to substitute global dma rx init, two tests failed.
23. typo bug, cleared. one test case obsolete.
24. use static instance to substitute global dma tx init, one case obsolete. passed.
25. add a struct for uart irq config. modify production code. passed.
26. a bit messy, right? let's clean it first.
	rename uart_clock_disable -> HAL_UART_ClockDisable, move to production code.
	rename uart_clock_enabled -> HAL_UART_ClockIsEnabled, move to production code.
	add test case for clock disable, new function HAL_UART_ClockEnable, compilation fails.
27.	add production code for HAL_UART_ClockEnable, test passed. add new test case for Enable, test passed.
28. we can do more refactor now, with this enable/disable code.
	we want to refine mspinit, unify usart2 with usart3; but we are using usart3, could we make usart2 works like usart3 before we change the code?
	yes, we refactor mx_usart2_init first.
	of course, test case first. Acturally here is the problem. mspinit do not have return value and hal_init change hal state to ready anyway.
	test case added and passed.
29.	add new static struct to replace original globals. modify both test case and globals.
	well, we are going to modify existing test case first. using different test data.
	surprisingly, it passed ANYWAY.
	best practice: (1) using assert_parameter; (2) change it.
30. gpio_init test case updated. minor.
31. mx_usart2_uart_init refactored.
32. add a new test case for mx_usart_usart_init, test transmission.
33. replace usart2 globals with new globals with designated initializer. move isr code to usart.c. test passed.
34. now we have using usart2 to work like usart3 and all test case passed. it's time to merge usart2/usart3 code in mspinit.
	oh, wait, first add new globals for usart3, replace init code in MX_USART3_UART_Init, test passed.
35.	refactor gpio init code inside mspinit for usart3. test passed.
36. merge merge merge.
37. clean
38. UART_IrqConfig -> IRQ_ConfigTypeDef.
	add two field into UARTEX_HandleTypeDef for dma irq config. add one test case. failed.
39. add dmarx irq enabling code in mspinit, bugged and fixed. test pass.
40. add dmatx irq test. test fail.
41. add dmatx irq enabling code in mspinit, passed. a little more refactor for uart irq enabling, test passed.
42. remove dma irq enabling code in mx_dma_init();

43. analyze and planning dma clock, OR-ing Switch Model, test plan. first test, compilation fail.
44. define the function, provide the skeleton, compilation ok.
45. go back to test case. finished. dont forget to add the new test group to RunAllTests, test fail of course, :)
46. add production code for clock get, test passed.


Pending: 
1. we don't like the local configuration struct hard coded inside mspinit. not flexible for test and user.
2. we don't like the way dma globals are used in mspinit. not good for test.
3. move SetPriorityGroup out of hal_uart_mspinit.
4. add a test case to mspinit with parameterized priority.

Task:
1. setup and teardown code.
2. uart clock enable/disable.
3. feature: dma irq should be set in uart.
4. feature: dma clock should be get/put pattern.




